Use the accounts table to find
All the companies whose names start with 'C'.
Though SQL is not case sensitive (it doesn't care if you write your statements as all uppercase or lowercase), 
we discussed some best practices. The order of the key words does matter!

SELECT col1, col2
FROM table1
WHERE col3  > 5 AND col4 LIKE '%os%'
ORDER BY col5
LIMIT 10;


Questions using the LIKE operator

SELECT name
FROM accounts
WHERE name LIKE 'C%';

Questions using AND and BETWEEN operators

Write a query that returns all the orders where the standard_qty is 
over 1000, the poster_qty is 0, and the gloss_qty is 0.

SELECT *
FROM orders
WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;

Using the accounts table, find all the companies whose names 
do not start with 'C' and end with 's'.

SELECT *
FROM accounts
WHERE name NOT LIKE 'C%' AND name NOT LIKE '%s';

When you use the BETWEEN operator in SQL, do the results 
include the values of your endpoints, or not? Figure out the answer
 to this important question by writing a query that displays the order 
date and gloss_qty data for all orders where gloss_qty is between 24 and 29. 
Then look at your output to see if the BETWEEN operator included the begin and end values or not.

SELECT occured_at, gloss_qty
FROM orders
WHERE gloss_qty BETWEEN 24 AND 29;

Use the web_events table to find all information regarding individuals who 
were contacted via the organic or adwords channels, and started their account at any point in 2016, 
sorted from newest to oldest.

SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
ORDER BY occurred_at DESC;

All companies whose names contain the string 'one' somewhere in the name.

SELECT name
FROM accounts
WHERE name LIKE '%one%';

All companies whose names end with 's'.

SELECT name
FROM accounts
WHERE name LIKE '%s';

Questions using IN operator

Use the accounts table to find the account name, 
primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.

SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom')

Use the web_events table to find all information regarding individuals who were 
contacted via the channel of organic or adwords.

SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords');

Questions using the OR operator

Find list of orders ids where either gloss_qty or poster_qty is 
greater than 4000. Only include the id field in the resulting table.

SELECT id
FROM orders
WHERE gloss_qty > 4000 OR poster_qty > 4000;

Write a query that returns a list of orders where the standard_qty 
is zero and either the gloss_qty or poster_qty is over 1000.

SELECT *
FROM orders
WHERE standard_qty = 0 OR gloss_qty > 1000 OR poster_qty > 1000;


Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'.
SELECT *
FROM accounts
WHERE (name LIKE 'C%' OR name LIKE 'W%') 
           AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') 
           AND primary_poc NOT LIKE '%eana%');



Solutions for Join

Provide a table that provides the region for each sales_rep along with their associated accounts. 
This time only for the Midwest region. Your final table should include three columns: the region name, 
the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
SELECT r.name region, s.name rep, a.name account

FROM sales_reps s
JOIN region r
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
WHERE r.name = 'Midwest'
ORDER BY a.name;

Provide a table that provides the region for each sales_rep along with their associated accounts. 
This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. 
Your final table should include three columns: the region name, the sales rep name, and the account name. 
Sort the accounts alphabetically (A-Z) according to account name.
SELECT r.name region, s.name rep, a.name account

FROM sales_reps s
JOIN region r
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
WHERE r.name = 'Midwest' AND s.name LIKE 'S%'
ORDER BY a.name;

Provide a table that provides the region for each sales_rep along with their associated accounts. 
This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. 
Your final table should include three columns: the region name, the sales rep name, and the account name. 
Sort the accounts alphabetically (A-Z) according to account name.
SELECT r.name region, s.name rep, a.name account
FROM sales_reps s
JOIN region r
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
WHERE r.name = 'Midwest' AND s.name LIKE '% K%'
ORDER BY a.name;

Provide the name for each region for every order, as well as the account name and the unit price they
 paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard 
order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price.
SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price

FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty > 100;

Provide the name for each region for every order, as well as the account name and the unit price they 
paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard
 order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: 
region name, account name, and unit price. Sort for the smallest unit price first.
SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price

FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty > 100 AND o.poster_qty > 50
ORDER BY unit_price;

Provide the name for each region for every order, as well as the account name and the unit price they 
paid (total_amt_usd/total) for the order. However, you should only provide the results if the 
standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should 
have 3 columns: region name, account name, and unit price. Sort for the largest unit price first.

SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty > 100 AND o.poster_qty > 50
ORDER BY unit_price DESC;


What are the different channels used by account id 1001? Your final table should have only 2 columns:
 account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.

SELECT DISTINCT a.name, w.channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE a.id = '1001';

Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, 
order total, and order total_amt_usd.

SELECT o.occurred_at, a.name, o.total, o.total_amt_usd
FROM accounts a
JOIN orders o
ON o.account_id = a.id
WHERE o.occurred_at BETWEEN '01-01-2015' AND '01-01-2016'
ORDER BY o.occurred_at DESC;